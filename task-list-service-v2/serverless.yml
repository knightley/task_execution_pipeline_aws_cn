service: task-list-service-v2
variablesResolutionMode: 20210219
frameworkVersion: ">=1.30.0"
plugins:
  - serverless-offline
  - serverless-domain-manager
custom:
  dotenvVars: ${file(configs.js)}
  accountid: ${self:custom.dotenvVars.AWS_ACCOUNT_ID}
  cloud: ${self:custom.dotenvVars.TARGET_CLOUD}
  region: ${self:custom.dotenvVars.TARGET_REGION}
  domain: ${self:custom.dotenvVars.TASK_LIST_DOMAIN}
  taskExecTaskTable: ${self:custom.dotenvVars.TASK_EXEC_TASK_TABLE}
  TaskExecIssueTable: ${self:custom.dotenvVars.TASK_EXEC_ISSUE_TABLE}
#  userPoolArn: ${env:TASK_LIST_USER_POOL_ARN}
  customDomain:
    domainName: 'tasklistapi.${self:custom.domain}'
    stage: ${self:provider.stage}
    basePath: v2
    certificateName: '*.${self:custom.domain}'
    createRoute53Record: true
    endpointType: regional
  serverless-offline:
    port: 3000

provider:
  name: aws
  region: ${self:custom.region}
  runtime: java8
  stage: ${opt:stage, 'dev'}
  lambdaHashingVersion: 20201221
  endpointType: regional
  environment:
    TASK_TABLE: '${self:custom:taskExecTaskTable, env:TASK_EXEC_TASK_TABLE}-${self:provider.stage}'
    ISSUE_TABLE: '${self:custom:TaskExecIssueTable, env:TASK_EXEC_ISSUE_TABLE}-${self:provider.stage}'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:${self:custom.cloud}:dynamodb:${self:custom.region}:${self:custom.accountid}:*"

package:
  artifact: 'target/${self:service}-${self:provider.stage}.jar'

functions:
  create:
    handler: com.rwang5688.CreateTaskHandler
    role: arn:${self:custom.cloud}:iam::${self:custom.accountid}:role/task-list
    events:
      - http:
          method: POST
          path: tasks
          cors: true
#          authorizer:
#            arn: '${self:custom.userPoolArn}'
  read:
    handler: com.rwang5688.GetTaskHandler
    role: arn:${self:custom.cloud}:iam::${self:custom.accountid}:role/task-list
    events:
      - http:
          method: GET
          path: users/{user_id}/tasks/{task_id}
          cors: true
#          authorizer:
#            arn: '${self:custom.userPoolArn}'
  update:
    handler: com.rwang5688.UpdateTaskHandler
    role: arn:${self:custom.cloud}:iam::${self:custom.accountid}:role/task-list
    events:
      - http:
          method: PUT
          path: users/{user_id}/tasks/{task_id}
          cors: true
#          authorizer:
#            arn: '${self:custom.userPoolArn}'
  delete:
    handler: com.rwang5688.DeleteTaskHandler
    role: arn:${self:custom.cloud}:iam::${self:custom.accountid}:role/task-list
    events:
      - http:
          method: DELETE
          path: users/{user_id}/tasks/{task_id}
          cors: true
#          authorizer:
#            arn: '${self:custom.userPoolArn}'
  list:
    handler: com.rwang5688.ListTasksHandler
    role: arn:${self:custom.cloud}:iam::${self:custom.accountid}:role/task-list
    events:
      - http:
          method: GET
          path: tasks
          cors: true
#          authorizer:
#            arn: '${self:custom.userPoolArn}'
  getTaskIssues:
    handler: com.rwang5688.GetTaskIssuesHandler
    role: arn:${self:custom.cloud}:iam::${self:custom.accountid}:role/task-list
    events:
      - http:
          method: GET
          path: tasks/{id}/issues
          cors: true
#          authorizer:
#           arn: '${self:custom.userPoolArn}'

