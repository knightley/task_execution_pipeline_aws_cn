service: upload-task-issues
variablesResolutionMode: 20210219
frameworkVersion: ">=1.30.0"
plugins:
  - serverless-python-requirements
custom:
  dotenvVars: ${file(configs.js)}
  accountid: ${self:custom.dotenvVars.AWS_ACCOUNT_ID}
  cloud: ${self:custom.dotenvVars.TARGET_CLOUD}
  region: ${self:custom.dotenvVars.TARGET_REGION}
  logDataBucket: ${self:custom.dotenvVars.TASK_EXEC_LOG_DATA_BUCKET}
  resultDataBucket: ${self:custom.dotenvVars.TASK_EXEC_RESULT_DATA_BUCKET}
  uploadTaskIssuesQueue: ${self:custom.dotenvVars.TASK_EXEC_UPLOAD_TASK_ISSUES_QUEUE}
  generateTaskSummaryQueue: ${self:custom.dotenvVars.TASK_EXEC_GENERATE_TASK_SUMMARY_QUEUE}
  taskExecIssueTable: ${self:custom.dotenvVars.TASK_EXEC_ISSUE_TABLE}
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  region: ${self:custom.region}
  runtime: python3.8
  stage: dev
#environment: ${file(configs.js)}       # not working as the github example
  lambdaHashingVersion: 20201221
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource: "arn:${self:custom.cloud}:s3:::${self:custom.logDataBucket}/*"
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource: "arn:${self:custom.cloud}:s3:::${self:custom.resultDataBucket}/*"
        - Effect: Allow
          Action:
            - sqs:ListQueues
          Resource: "arn:${self:custom.cloud}:sqs:${self:provider.region}:*:*"
        - Effect: Allow
          Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueUrl
          Resource: "arn:${self:custom.cloud}:sqs:*:*:${self:custom.uploadTaskIssuesQueue}"
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:DeleteMessage
            - sqs:GetQueueUrl
          Resource: "arn:${self:custom.cloud}:sqs:*:*:${self:custom.generateTaskSummaryQueue}"
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:${self:custom.cloud}:dynamodb:${self:custom.region}:${self:custom.accountid}:*"

functions:
  upload_task_issues:
    handler: upload_task_issues.upload_task_issues
    memorySize: 2048
    timeout: 600
    role: arn:${self:custom.cloud}:iam::${self:custom.accountid}:role/task-execution-pipeline
    environment:
      ACCOUNT_ID: ${self:custom.accountid, env:AWS_ACCOUNT_ID}
      TARGET_REGION: ${self:custom.region, env:TARGET_REGION}
      LOG_DATA_BUCKET: ${self:custom.logDataBucket, env:TASK_EXEC_LOG_DATA_BUCKET}
      RESULT_DATA_BUCKET: ${self:custom.resultDataBucket, env:TASK_EXEC_RESULT_DATA_BUCKET}
      UPLOAD_TASK_ISSUES_QUEUE: ${self:custom.uploadTaskIssuesQueue, env:TASK_EXEC_UPLOAD_TASK_ISSUES_QUEUE}
      GENERATE_TASK_SUMMARY_QUEUE: ${self:custom.generateTaskSummaryQueue, env:TASK_EXEC_GENERATE_TASK_SUMMARY_QUEUE}
      ISSUE_TABLE: '${self:custom.taskExecIssueTable, env:TASK_EXEC_ISSUE_TABLE}-${self:provider.stage}'
    events:
      - sqs:
          arn: "arn:${self:custom.cloud}:sqs:${self:provider.region}:${self:custom.accountid}:${self:custom.uploadTaskIssuesQueue}"

