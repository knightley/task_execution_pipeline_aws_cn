service: create-task
variablesResolutionMode: 20210219
frameworkVersion: ">=1.30.0"
plugins:
  - serverless-python-requirements
custom:
  dotenvVars: ${file(configs.js)}
  accountid: ${self:custom.dotenvVars.AWS_ACCOUNT_ID}
  cloud: ${self:custom.dotenvVars.TARGET_CLOUD}
  region: ${self:custom.dotenvVars.TARGET_REGION}
  ecsClusterName: ${self:custom.dotenvVars.ECS_CLUSTER_NAME}
  ecsTaskDefinition: ${self:custom.dotenvVars.ECS_TASK_DEFINITION}
  ecsTaskNetworkVpcSubnet1: ${self:custom.dotenvVars.ECS_TASK_NETWORK_VPC_SUBNET1}
  ecsTaskNetworkVpcSubnet2: ${self:custom.dotenvVars.ECS_TASK_NETWORK_VPC_SUBNET2}
  ecsTaskNetworkVpcSecurityGroup: ${self:custom.dotenvVars.ECS_TASK_NETWORK_VPC_SECURITY_GROUP}
  preprocessDataBucket: ${self:custom.dotenvVars.TASK_EXEC_PREPROCESS_DATA_BUCKET}
  resultDataBucket: ${self:custom.dotenvVars.TASK_EXEC_RESULT_DATA_BUCKET}
  createTaskQueue: ${self:custom.dotenvVars.TASK_EXEC_CREATE_TASK_QUEUE}
  processTaskQueue: ${self:custom.dotenvVars.TASK_EXEC_PROCESS_TASK_QUEUE}
  processTaskTriggerQueue: ${self:custom.dotenvVars.TASK_EXEC_PROCESS_TASK_TRIGGER_QUEUE}
  taskExecTaskTable: ${self:custom.dotenvVars.TASK_EXEC_TASK_TABLE}
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  region: ${self:custom.region}
  runtime: python3.8
  stage: dev
#environment: ${file(configs.js)}       # not working as the github example
  lambdaHashingVersion: 20201221
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource: "arn:${self:custom.cloud}:s3:::${self:custom.preprocessDataBucket}/*"
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource: "arn:${self:custom.cloud}:s3:::${self:custom.resultDataBucket}/*"
        - Effect: Allow
          Action:
            - sqs:ListQueues
          Resource: "arn:${self:custom.cloud}:sqs:${self:provider.region}:*:*"
        - Effect: Allow
          Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueUrl
          Resource: "arn:${self:custom.cloud}:sqs:*:*:${self:custom.createTaskQueue}"
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:DeleteMessage
            - sqs:GetQueueUrl
          Resource: "arn:${self:custom.cloud}:sqs:*:*:${self:custom.processTaskQueue}"
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:DeleteMessage
            - sqs:GetQueueUrl
          Resource: "arn:${self:custom.cloud}:sqs:*:*:${self:custom.processTaskTriggerQueue}"
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:${self:custom.cloud}:dynamodb:${self:custom.region}:${self:custom.accountid}:*"

functions:
  create_task:
    handler: create_task.create_task
    role: arn:${self:custom.cloud}:iam::${self:custom.accountid}:role/task-execution-pipeline
    tracing: true
    environment:
      ACCOUNT_ID: ${self:custom.accountid, env:AWS_ACCOUNT_ID}
      CLOUD: ${self:custom.cloud, env:TARGET_CLOUD}
      TARGET_REGION: ${self:custom.region, env:TARGET_REGION}
      ECS_CLUSTER_NAME: ${self:custom.ecsClusterName, env:ECS_CLUSTER_NAME}
      ECS_TASK_DEFINITION: ${self:custom.ecsTaskDefinition, env:ECS_TASK_DEFINITION}
      ECS_TASK_NETWORK_VPC_SUBNET1: ${self:custom.ecsTaskNetworkVpcSubnet1, env:ECS_TASK_NETWORK_VPC_SUBNET1}
      ECS_TASK_NETWORK_VPC_SUBNET2: ${self:custom.ecsTaskNetworkVpcSubnet2, env:ECS_TASK_NETWORK_VPC_SUBNET2}
      ECS_TASK_NETWORK_VPC_SECURITY_GROUP: ${self:custom.ecsTaskNetworkVpcSecurityGroup, env:ECS_TASK_NETWORK_VPC_SECURITY_GROUP}
      PREPROCESS_DATA_BUCKET: ${self:custom.preprocessDataBucket, env:TASK_EXEC_PREPROCESS_DATA_BUCKET}
      RESULT_DATA_BUCKET: ${self:custom.resultDataBucket, env:TASK_EXEC_RESULT_DATA_BUCKET}
      CREATE_TASK_QUEUE: ${self:custom.createTaskQueue, env:TASK_EXEC_CREATE_TASK_QUEUE}
      PROCESS_TASK_QUEUE: ${self:custom.processTaskQueue, env:TASK_EXEC_PROCESS_TASK_QUEUE}
      PROCESS_TASK_TRIGGER_QUEUE: ${self:custom.processTaskTriggerQueue, env:TASK_EXEC_PROCESS_TASK_TRIGGER_QUEUE}
      TASK_TABLE: "${self:custom.taskExecTaskTable, env:TASK_EXEC_TASK_TABLE}-${self:provider.stage}"
    events:
      - sqs:
          arn: "arn:${self:custom.cloud}:sqs:${self:provider.region}:${self:custom.accountid}:${self:custom.createTaskQueue}"

